import { Injectable, ɵɵdefineInjectable, Component, Input, HostListener, Pipe, NgModule } from '@angular/core';
import moment from 'moment-jalaali';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-persian-datepicker.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgPersianDatepickerService {
    constructor() { }
}
NgPersianDatepickerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgPersianDatepickerService.ctorParameters = () => [];
/** @nocollapse */ NgPersianDatepickerService.ɵprov = ɵɵdefineInjectable({ factory: function NgPersianDatepickerService_Factory() { return new NgPersianDatepickerService(); }, token: NgPersianDatepickerService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-persian-datepicker.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgPersianDatepickerComponent {
    constructor() {
        this.containerInlineStyle = {};
        this.uiYearViewModel = true;
        this.uiMonthViewModel = true;
        //
        this.viewDateTitle = '';
        this.viewModes = ['day'];
        this.currentViewMode = 0;
        //
        this.years = [];
        this.months = [];
        this.days = [];
        //
        this.hour = 0;
        this.minute = 0;
        this.second = 0;
        //
        this.hourText = '';
        this.minuteText = '';
        this.secondText = '';
        this.amPmText = '';
        //
        this.fastTimeChangeTimeOut = 345;
        this.fastTimeChangeInterval = 123;
        //
        this.wasInsideClick = false;
        this.input = null;
        // date
        // tslint:disable-next-line:variable-name
        this._dateValue = '';
        this.dateValue = '';
        this.dateInitValue = true;
        this.dateIsGregorian = false;
        this.dateFormat = 'jYYYY-jMM-jDD HH:mm:ss';
        this.dateGregorianFormat = 'YYYY-MM-DD HH:mm:ss';
        this.dateMin = null;
        this.dateMax = null;
        this.dateOnInit = (/**
         * @return {?}
         */
        () => { });
        this.dateOnSelect = (/**
         * @return {?}
         */
        () => { });
        // time
        this._timeEnable = true;
        this.timeShowSecond = true;
        // tslint:disable-next-line:variable-name
        this._timeMeridian = false;
        // ui
        this.uiTheme = 'default';
        this.uiIsVisible = false;
        this.uiHideOnOutsideClick = true;
        this.uiHideAfterSelectDate = true;
        this.uiAutoPosition = false;
        this.uiPositionOffset = [0, 0];
        this.uiContainerWidth = '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set timeEnable(value) {
        this._timeEnable = value;
        this.setTime();
        this.seTimeText();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set timeMeridian(value) {
        this._timeMeridian = value;
        this.seTimeText();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set uiYearView(value) {
        this.uiYearViewModel = value;
        this.checkViewModes();
    }
    /**
     * @return {?}
     */
    get uiYearView() {
        return this.uiYearViewModel;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set uiMonthView(value) {
        this.uiMonthViewModel = value;
        this.checkViewModes();
    }
    /**
     * @return {?}
     */
    get uiMonthView() {
        return this.uiMonthViewModel;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setId();
        moment.loadPersian({
            usePersianDigits: false,
            dialect: 'persian-modern'
        });
        this.setWeekDays();
        //
        this.setViewModes();
        //
        this.setToday();
        this.setDateInitValue();
        //
        this.setSelectedDate();
        this.setViewDate();
        //
        this.setTime();
        this.seTimeText();
        //
        this.setInputValue();
        this.lockInputValue();
        this.setShowOnInputFocus();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.input) {
            this.input.removeEventListener('focus', this.inputEventFocusListener);
            this.input.removeEventListener('input', this.inputEventInputListener);
        }
    }
    /**
     * @return {?}
     */
    setId() {
        this.id = 'ng-persian-datepicker-' + Math.random().toString(36).substr(2, 9);
    }
    /**
     * @return {?}
     */
    setWeekDays() {
        this.weekDays = moment.weekdaysMin();
        this.weekDays.unshift(this.weekDays.pop());
    }
    /**
     * @return {?}
     */
    setViewModes() {
        this.viewModes = ['day'];
        if (this.uiMonthView) {
            this.viewModes.push('month');
        }
        if (this.uiYearView) {
            this.viewModes.push('year');
        }
        if (this.viewModes.length <= this.currentViewMode) {
            this.currentViewMode = 0;
        }
    }
    /**
     * @return {?}
     */
    checkViewModes() {
        /** @type {?} */
        let viewModesCount = 1;
        if (this.uiYearView) {
            viewModesCount++;
        }
        if (this.uiMonthView) {
            viewModesCount++;
        }
        if (viewModesCount !== this.viewModes.length) {
            this.setViewModes();
        }
    }
    /**
     * @return {?}
     */
    setToday() {
        this.today = moment();
    }
    /**
     * @return {?}
     */
    setDateInitValue() {
        if (this.dateValue || !this.dateInitValue) {
            return;
        }
        this._dateValue = this.today.valueOf();
        this.selectedDate = moment(((/** @type {?} */ (this._dateValue))));
        this.dateOnInit(String(this.selectedDate.format(this.dateFormat)), String(this.selectedDate.format(this.dateGregorianFormat)), Number(this.selectedDate.valueOf()));
    }
    /**
     * @return {?}
     */
    setSelectedDate() {
        if (!this.dateValue) {
            return;
        }
        this._dateValue = this.dateValue;
        if (typeof this._dateValue === 'string') {
            if (this.dateIsGregorian) {
                this._dateValue = moment(((/** @type {?} */ (this._dateValue))), this.dateGregorianFormat).valueOf();
            }
            else {
                this._dateValue = moment(((/** @type {?} */ (this._dateValue))), this.dateFormat).valueOf();
            }
        }
        this.selectedDate = moment(((/** @type {?} */ (this._dateValue))));
    }
    /**
     * @return {?}
     */
    setViewDate() {
        if (!this._dateValue) {
            this.viewDate = moment(this.today);
        }
        else {
            this.viewDate = moment(this.selectedDate);
        }
        this.onChangeViewDate();
    }
    /**
     * @return {?}
     */
    onChangeViewDate() {
        this.viewDate.startOf('jMonth');
        this.setYears();
        this.setMonths();
        this.setDays();
        this.setViewDateTitle();
    }
    /**
     * @return {?}
     */
    setYears() {
        this.years = [];
        /** @type {?} */
        const years = moment(this.viewDate);
        years.startOf('jYear');
        years.add(-6, 'jYear');
        for (let i = 0; i < 12; i++) {
            /** @type {?} */
            const year = [years.valueOf(), years.jYear()];
            this.years.push({
                timestamp: year[0],
                value: year[1],
                isYearOfTodayDate: this.isYearOfTodayDate(year),
                isYearOfSelectedDate: this.isYearOfSelectedDate(year),
                isYearDisabled: this.isYearDisabled(year)
            });
            years.add(1, 'jYear');
        }
    }
    /**
     * @return {?}
     */
    setMonths() {
        this.months = [];
        /** @type {?} */
        const months = moment(this.viewDate);
        months.startOf('jYear');
        for (let i = 0; i < 12; i++) {
            /** @type {?} */
            const month = [months.valueOf(), months.jYear(), months.jMonth()];
            this.months.push({
                timestamp: month[0],
                year: month[1],
                indexValue: month[2],
                isMonthOfTodayDate: this.isMonthOfToday(month),
                isMonthOfSelectedDate: this.isMonthOfSelectedDate(month),
                isMonthDisabled: this.isMonthDisabled(month)
            });
            months.add(1, 'jMonth');
        }
    }
    /**
     * @return {?}
     */
    setDays() {
        this.days = [];
        //
        /** @type {?} */
        const prevMonthDetails = [];
        /** @type {?} */
        const currentMonthDetails = [];
        /** @type {?} */
        const nextMonthDetails = [];
        //
        /** @type {?} */
        const prevMonth = moment(this.viewDate);
        /** @type {?} */
        const currentMonth = moment(this.viewDate);
        /** @type {?} */
        const nextMonth = moment(this.viewDate);
        //
        prevMonth.add(-1, 'jMonth');
        nextMonth.add(1, 'jMonth');
        //
        /** @type {?} */
        const currentMonthDays = moment.jDaysInMonth(currentMonth.jYear(), currentMonth.jMonth());
        /** @type {?} */
        const prevMonthDays = moment.jDaysInMonth(prevMonth.jYear(), prevMonth.jMonth());
        /** @type {?} */
        const nextMonthDays = moment.jDaysInMonth(nextMonth.jYear(), nextMonth.jMonth());
        //
        for (let i = 0; i < prevMonthDays; i++) {
            prevMonthDetails.push([prevMonth.valueOf(), prevMonth.jYear(), prevMonth.jMonth(), prevMonth.jDate()]);
            prevMonth.add(1, 'day');
        }
        for (let i = 0; i < currentMonthDays; i++) {
            currentMonthDetails.push([currentMonth.valueOf(), currentMonth.jYear(), currentMonth.jMonth(), currentMonth.jDate()]);
            currentMonth.add(1, 'day');
        }
        for (let i = 0; i < nextMonthDays; i++) {
            nextMonthDetails.push([nextMonth.valueOf(), nextMonth.jYear(), nextMonth.jMonth(), nextMonth.jDate()]);
            nextMonth.add(1, 'day');
        }
        //
        for (let row = 0; row < 6; row++) {
            /** @type {?} */
            const rowValue = [];
            for (let col = 0; col < 7; col++) {
                /** @type {?} */
                const fromPrevMonth = (this.viewDate.day() === 6) ? 0 : (this.viewDate.day() + 1);
                /** @type {?} */
                let index = ((row * 7) + col) - fromPrevMonth;
                /** @type {?} */
                let day = null;
                if (index < 0) {
                    index = prevMonthDetails.length - (fromPrevMonth - col);
                    day = prevMonthDetails[index];
                }
                else if (index >= currentMonthDetails.length) {
                    index = index - currentMonthDetails.length;
                    day = nextMonthDetails[index];
                }
                else {
                    day = currentMonthDetails[index];
                }
                rowValue.push({
                    timestamp: day[0],
                    year: day[1],
                    monthIndex: day[2],
                    value: day[3],
                    isDayInCurrentMonth: this.isDayInCurrentMonth(day),
                    isDayOfTodayDate: this.isDayOfTodayDate(day),
                    isDayOfSelectedDate: this.isDayOfSelectedDate(day),
                    isDayDisabled: this.isDayDisabled(day)
                });
            }
            this.days.push(rowValue);
        }
    }
    /**
     * @return {?}
     */
    setViewDateTitle() {
        /** @type {?} */
        const year = this.viewDate.jYear();
        switch (this.viewModes[this.currentViewMode]) {
            case 'day':
                this.viewDateTitle = this.viewDate.format('jMMMM') + ' ' + year.toString();
                break;
            case 'month':
                this.viewDateTitle = year.toString();
                break;
            case 'year':
                this.viewDateTitle = (year - 6).toString() + '-' + (year + 5).toString();
                break;
        }
    }
    /**
     * @return {?}
     */
    setTime() {
        var _a, _b, _c;
        if (this.selectedDate) {
            this.hour = this.selectedDate.hour();
            this.minute = this.selectedDate.minute();
            this.second = this.selectedDate.second();
            return;
        }
        this.hour = ((_a = this.today) === null || _a === void 0 ? void 0 : _a.hour()) || 0;
        this.minute = ((_b = this.today) === null || _b === void 0 ? void 0 : _b.minute()) || 0;
        this.second = ((_c = this.today) === null || _c === void 0 ? void 0 : _c.second()) || 0;
    }
    /**
     * @return {?}
     */
    seTimeText() {
        this.setHourText();
        this.setMinuteText();
        this.setSecondText();
        this.setAmPmText();
    }
    /**
     * @return {?}
     */
    setHourText() {
        /** @type {?} */
        const hour = this.hour;
        if (!this._timeMeridian) {
            this.hourText = hour.toString().padStart(2, '0');
            return;
        }
        if (hour === 0) {
            this.hourText = (12).toString().padStart(2, '0');
            return;
        }
        if (hour > 12) {
            this.hourText = (hour - 12).toString().padStart(2, '0');
            return;
        }
        this.hourText = hour.toString().padStart(2, '0');
    }
    /**
     * @return {?}
     */
    setMinuteText() {
        this.minuteText = this.minute.toString().padStart(2, '0');
    }
    /**
     * @return {?}
     */
    setSecondText() {
        this.secondText = this.second.toString().padStart(2, '0');
    }
    /**
     * @return {?}
     */
    setAmPmText() {
        if (this.hour >= 12) {
            this.amPmText = 'PM';
            return;
        }
        this.amPmText = 'AM';
    }
    /**
     * @param {?=} dispatchEvent
     * @return {?}
     */
    setInputValue(dispatchEvent = true) {
        if (!this.input) {
            return;
        }
        if (this._dateValue) {
            this.input.value = moment(((/** @type {?} */ (this._dateValue)))).format(this.dateFormat);
            if (dispatchEvent) {
                this.input.dispatchEvent(new Event('input'));
            }
        }
    }
    /**
     * @return {?}
     */
    lockInputValue() {
        if (!this.input) {
            return;
        }
        this.inputEventInputListener = (/**
         * @return {?}
         */
        () => {
            this.setInputValue(false);
        });
        this.input.addEventListener('input', this.inputEventInputListener);
    }
    /**
     * @return {?}
     */
    setShowOnInputFocus() {
        if (!this.input) {
            return;
        }
        this.input.setAttribute('data-datepicker-id', this.id);
        this.inputEventFocusListener = (/**
         * @return {?}
         */
        () => {
            this.calcInputPositionAndSize();
            this.uiIsVisible = true;
        });
        this.input.addEventListener('focus', this.inputEventFocusListener);
    }
    /**
     * @param {?} skip
     * @param {?} type
     * @return {?}
     */
    skipViewDate(skip, type) {
        if (type === 1) {
            this.viewDate.add(skip, 'jYear');
        }
        else if (type === 2) {
            this.viewDate.add(skip, 'jMonth');
        }
    }
    /**
     * @param {?=} forward
     * @return {?}
     */
    navigate(forward = true) {
        /** @type {?} */
        let skip = 1;
        if (!forward) {
            skip = skip * -1;
        }
        switch (this.viewModes[this.currentViewMode]) {
            case 'day':
                this.skipViewDate(skip, 2);
                break;
            case 'month':
                this.skipViewDate(skip, 1);
                break;
            case 'year':
                this.skipViewDate((skip * 12), 1);
                break;
        }
        this.onChangeViewDate();
    }
    /**
     * @return {?}
     */
    nextViewMode() {
        if (this.viewModes.length === 1) {
            return;
        }
        if (this.viewModes.length <= (this.currentViewMode + 1)) {
            this.currentViewMode = 0;
            this.setViewDateTitle();
            return;
        }
        this.currentViewMode++;
        this.setViewDateTitle();
    }
    /**
     * @return {?}
     */
    selectToday() {
        this.setToday();
        this.preventClose = true;
        this.changeSelectedDate(this.today);
    }
    /**
     * @param {?} year
     * @return {?}
     */
    yearClick(year) {
        if (year.isYearDisabled) {
            return;
        }
        this.viewDate = moment(year.timestamp);
        /** @type {?} */
        let viewModeIndex = this.viewModes.indexOf('month');
        if (viewModeIndex === -1) {
            viewModeIndex = this.viewModes.indexOf('day');
        }
        this.currentViewMode = viewModeIndex;
        this.onChangeViewDate();
    }
    /**
     * @param {?} month
     * @return {?}
     */
    monthClick(month) {
        if (month.isMonthDisabled) {
            return;
        }
        this.viewDate = moment(month.timestamp);
        this.currentViewMode = this.viewModes.indexOf('day');
        this.onChangeViewDate();
    }
    /**
     * @param {?} day
     * @return {?}
     */
    dayClick(day) {
        if (day.isDayDisabled) {
            return;
        }
        this.changeSelectedDate(moment(day.timestamp));
    }
    /**
     * @param {?} year
     * @return {?}
     */
    isYearOfTodayDate(year) {
        return (this.today.jYear() === year[1]);
    }
    /**
     * @param {?} year
     * @return {?}
     */
    isYearOfSelectedDate(year) {
        if (!this.selectedDate) {
            return false;
        }
        return (year[1] === this.selectedDate.jYear());
    }
    /**
     * @param {?} month
     * @return {?}
     */
    isYearDisabled(month) {
        return !this.isDateInRange(month[0], true, false);
    }
    /**
     * @param {?} month
     * @return {?}
     */
    isMonthOfToday(month) {
        return (this.today.jYear() === month[1] &&
            this.today.jMonth() === month[2]);
    }
    /**
     * @param {?} month
     * @return {?}
     */
    isMonthOfSelectedDate(month) {
        if (!this.selectedDate) {
            return false;
        }
        return (month[1] === this.selectedDate.jYear() &&
            month[2] === this.selectedDate.jMonth());
    }
    /**
     * @param {?} month
     * @return {?}
     */
    isMonthDisabled(month) {
        return !this.isDateInRange(month[0], false, true);
    }
    /**
     * @param {?} day
     * @return {?}
     */
    isDayInCurrentMonth(day) {
        return (day[1] === this.viewDate.jYear() &&
            day[2] === this.viewDate.jMonth());
    }
    /**
     * @param {?} day
     * @return {?}
     */
    isDayOfTodayDate(day) {
        return (day[1] === this.today.jYear() &&
            day[2] === this.today.jMonth() &&
            day[3] === this.today.jDate());
    }
    /**
     * @param {?} day
     * @return {?}
     */
    isDayOfSelectedDate(day) {
        if (!this.selectedDate) {
            return false;
        }
        return (day[1] === this.selectedDate.jYear() &&
            day[2] === this.selectedDate.jMonth() &&
            day[3] === this.selectedDate.jDate());
    }
    /**
     * @param {?} day
     * @return {?}
     */
    isDayDisabled(day) {
        return !this.isDateInRange(day[0], false, false);
    }
    /**
     * @param {?} date
     * @param {?} isYear
     * @param {?} isMonth
     * @return {?}
     */
    isDateInRange(date, isYear, isMonth) {
        /** @type {?} */
        const result = [];
        if (this.dateMin) {
            /** @type {?} */
            const min = moment(this.dateMin);
            if (isYear) {
                min.startOf('jYear');
            }
            if (isMonth) {
                min.startOf('jMonth');
            }
            result.push(min.valueOf() <= date);
        }
        if (this.dateMax) {
            /** @type {?} */
            const max = moment(this.dateMax);
            if (isYear) {
                max.startOf('jYear');
            }
            if (isMonth) {
                max.startOf('jMonth');
            }
            result.push(max.valueOf() >= date);
        }
        return !(result.indexOf(false) !== -1);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    changeSelectedDate(date) {
        this.selectedDate = moment(date);
        this.onChangeSelectedDate();
    }
    /**
     * @return {?}
     */
    onChangeSelectedDate() {
        if (this._timeEnable) {
            this.selectedDate.hour(this.hour);
            this.selectedDate.minute(this.minute);
            this.selectedDate.second(this.second);
        }
        else {
            this.setToday();
            this.selectedDate.hour(this.today.hour());
            this.selectedDate.minute(this.today.minute());
            this.selectedDate.second(this.today.second());
        }
        this._dateValue = this.selectedDate.valueOf();
        this.setInputValue();
        if (this.uiHideAfterSelectDate && !this.preventClose) {
            this.uiIsVisible = false;
        }
        else {
            this.preventClose = false;
        }
        this.setViewDate();
        this.dateOnSelect(String(this.selectedDate.format(this.dateFormat)), String(this.selectedDate.format(this.dateGregorianFormat)), Number(this.selectedDate.valueOf()));
    }
    /**
     * @return {?}
     */
    increaseHour() {
        if ((this.hour + 1) === 24) {
            this.hour = 0;
        }
        else {
            this.hour++;
        }
        this.onTimeChange();
    }
    /**
     * @return {?}
     */
    decreaseHour() {
        if ((this.hour - 1) === -1) {
            this.hour = 23;
        }
        else {
            this.hour--;
        }
        this.onTimeChange();
    }
    /**
     * @return {?}
     */
    increaseMinute() {
        if ((this.minute + 1) === 60) {
            this.minute = 0;
        }
        else {
            this.minute++;
        }
        this.onTimeChange();
    }
    /**
     * @return {?}
     */
    decreaseMinute() {
        if ((this.minute - 1) === -1) {
            this.minute = 59;
        }
        else {
            this.minute--;
        }
        this.onTimeChange();
    }
    /**
     * @return {?}
     */
    increaseSecond() {
        if ((this.second + 1) === 60) {
            this.second = 0;
        }
        else {
            this.second++;
        }
        this.onTimeChange();
    }
    /**
     * @return {?}
     */
    decreaseSecond() {
        if ((this.second - 1) === -1) {
            this.second = 59;
        }
        else {
            this.second--;
        }
        this.onTimeChange();
    }
    /**
     * @return {?}
     */
    toggleAmPm() {
        if (this.hour < 12) {
            this.hour += 12;
        }
        else {
            this.hour -= 12;
        }
        this.onTimeChange();
    }
    /**
     * @return {?}
     */
    onTimeChange() {
        this.preventClose = true;
        this.seTimeText();
        this.changeSelectedDate(this.selectedDate);
    }
    /**
     * @return {?}
     */
    setIncreaseHourInterval() {
        this.increaseHourTimeout = setTimeout((/**
         * @return {?}
         */
        () => {
            this.increaseHourInterval = setInterval((/**
             * @return {?}
             */
            () => {
                this.increaseHour();
            }), this.fastTimeChangeInterval);
        }), this.fastTimeChangeTimeOut);
    }
    /**
     * @return {?}
     */
    clearIncreaseHourInterval() {
        clearTimeout(this.increaseHourTimeout);
        clearInterval(this.increaseHourInterval);
    }
    /**
     * @return {?}
     */
    setDecreaseHourInterval() {
        this.decreaseHourTimeout = setTimeout((/**
         * @return {?}
         */
        () => {
            this.decreaseHourInterval = setInterval((/**
             * @return {?}
             */
            () => {
                this.decreaseHour();
            }), this.fastTimeChangeInterval);
        }), this.fastTimeChangeTimeOut);
    }
    /**
     * @return {?}
     */
    clearDecreaseHourInterval() {
        clearTimeout(this.decreaseHourTimeout);
        clearInterval(this.decreaseHourInterval);
    }
    /**
     * @return {?}
     */
    setIncreaseMinuteInterval() {
        this.increaseMinuteTimeout = setTimeout((/**
         * @return {?}
         */
        () => {
            this.increaseMinuteInterval = setInterval((/**
             * @return {?}
             */
            () => {
                this.increaseMinute();
            }), this.fastTimeChangeInterval);
        }), this.fastTimeChangeTimeOut);
    }
    /**
     * @return {?}
     */
    clearIncreaseMinuteInterval() {
        clearTimeout(this.increaseMinuteTimeout);
        clearInterval(this.increaseMinuteInterval);
    }
    /**
     * @return {?}
     */
    setDecreaseMinuteInterval() {
        this.decreaseMinuteTimeout = setTimeout((/**
         * @return {?}
         */
        () => {
            this.decreaseMinuteInterval = setInterval((/**
             * @return {?}
             */
            () => {
                this.decreaseMinute();
            }), this.fastTimeChangeInterval);
        }), this.fastTimeChangeTimeOut);
    }
    /**
     * @return {?}
     */
    clearDecreaseMinuteInterval() {
        clearTimeout(this.decreaseMinuteTimeout);
        clearInterval(this.decreaseMinuteInterval);
    }
    /**
     * @return {?}
     */
    setIncreaseSecondInterval() {
        this.increaseSecondTimeout = setTimeout((/**
         * @return {?}
         */
        () => {
            this.increaseSecondInterval = setInterval((/**
             * @return {?}
             */
            () => {
                this.increaseSecond();
            }), this.fastTimeChangeInterval);
        }), this.fastTimeChangeTimeOut);
    }
    /**
     * @return {?}
     */
    clearIncreaseSecondInterval() {
        clearTimeout(this.increaseSecondTimeout);
        clearInterval(this.increaseSecondInterval);
    }
    /**
     * @return {?}
     */
    setDecreaseSecondInterval() {
        this.decreaseSecondTimeout = setTimeout((/**
         * @return {?}
         */
        () => {
            this.decreaseSecondInterval = setInterval((/**
             * @return {?}
             */
            () => {
                this.decreaseSecond();
            }), this.fastTimeChangeInterval);
        }), this.fastTimeChangeTimeOut);
    }
    /**
     * @return {?}
     */
    clearDecreaseSecondInterval() {
        clearTimeout(this.decreaseSecondTimeout);
        clearInterval(this.decreaseSecondInterval);
    }
    /**
     * @return {?}
     */
    setContainerInlineStyle() {
        if (!this.uiAutoPosition) {
            return;
        }
        /** @type {?} */
        const containerWidth = {
            width: '200px'
        };
        /** @type {?} */
        const containerPosition = {
            position: 'absolute',
            top: String(this.uiPositionOffset[0]) + 'px',
            left: String(this.uiPositionOffset[1]) + 'px',
        };
        if (this.input && this.inputPosition) {
            containerWidth.width = String(this.inputSize[0]) + 'px';
            containerPosition.top = String(this.inputPosition[0] + this.inputSize[1] + this.uiPositionOffset[0]) + 'px';
            containerPosition.left = String(this.inputPosition[1] + this.uiPositionOffset[1]) + 'px';
        }
        if (this.uiContainerWidth) {
            containerWidth.width = this.uiContainerWidth;
        }
        this.containerInlineStyle = Object.assign(containerWidth, containerPosition);
    }
    /**
     * @return {?}
     */
    calcInputPositionAndSize() {
        if (!this.input) {
            return;
        }
        this.inputPosition = [0, 0];
        /** @type {?} */
        let element = this.input;
        while (element) {
            this.inputPosition[0] += element.offsetTop || 0;
            this.inputPosition[1] += element.offsetLeft || 0;
            element = (/** @type {?} */ (element.offsetParent));
        }
        //
        this.inputSize = [0, 0];
        this.inputSize[0] = this.input.getBoundingClientRect().width;
        this.inputSize[1] = this.input.getBoundingClientRect().height;
        //
        this.setContainerInlineStyle();
    }
    /**
     * @return {?}
     */
    onInsideClick() {
        this.wasInsideClick = true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onOutsideClick(event) {
        /** @type {?} */
        const wasInsideClick = this.wasInsideClick;
        this.wasInsideClick = false;
        if (wasInsideClick) {
            return;
        }
        if (!this.uiHideOnOutsideClick ||
            (this.input && (event.target.getAttribute('data-datepicker-id') === this.id))) {
            return;
        }
        this.uiIsVisible = false;
    }
}
NgPersianDatepickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-persian-datepicker',
                template: "<div\n  class=\"datepicker-outer-container\"\n  [class.theme-default]=\"uiTheme === 'default'\"\n  [class.theme-blue]=\"uiTheme === 'blue'\"\n  [class.theme-gray]=\"uiTheme === 'gray'\"\n  [class.theme-dark]=\"uiTheme === 'dark'\"\n  [class.theme-black]=\"uiTheme === 'black'\"\n  [class.manual-position]=\"!uiAutoPosition\"\n  [class.hide]=\"!uiIsVisible\"\n  [attr.data-datepicker-id]=\"id\"\n  [ngStyle]=\"containerInlineStyle\">\n  <div\n    class=\"datepicker-inner-container\">\n\n    <!-- Start: navigation -->\n    <div\n      class=\"content-container navigation-container\">\n      <div\n        class=\"go-back dp-btn\"\n        (click)=\"navigate(false)\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 240.823 240.823\"\n          xml:space=\"preserve\">\n          <path\n            d=\"M183.189,111.816L74.892,3.555c-4.752-4.74-12.451-4.74-17.215,0c-4.752,4.74-4.752,12.439,0,17.179\n            l99.707,99.671l-99.695,99.671c-4.752,4.74-4.752,12.439,0,17.191c4.752,4.74,12.463,4.74,17.215,0l108.297-108.261\n            C187.881,124.315,187.881,116.495,183.189,111.816z\"></path>\n        </svg>\n      </div>\n      <div\n        class=\"switch-view dp-btn\"\n        (click)=\"nextViewMode()\">\n        <span>{{ viewDateTitle }}</span>\n      </div>\n      <div\n        class=\"go-forward dp-btn\"\n        (click)=\"navigate(true)\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 240.823 240.823\"\n          xml:space=\"preserve\">\n          <path\n            d=\"M57.633,129.007L165.93,237.268c4.752,4.74,12.451,4.74,17.215,0c4.752-4.74,4.752-12.439,0-17.179\n            l-99.707-99.671l99.695-99.671c4.752-4.74,4.752-12.439,0-17.191c-4.752-4.74-12.463-4.74-17.215,0L57.621,111.816\n            C52.942,116.507,52.942,124.327,57.633,129.007z\"></path>\n        </svg>\n      </div>\n    </div>\n    <!-- End: navigation -->\n\n    <!-- Start: year view mode -->\n    <div\n      *ngIf=\"viewModes[currentViewMode] === 'year'\"\n      class=\"years-container\">\n      <div\n        class=\"content-container\">\n        <div\n          class=\"year-col three-col-per-row dp-btn\"\n          [class.today]=\"year.isYearOfTodayDate\"\n          [class.selected]=\"year.isYearOfSelectedDate\"\n          [class.disabled]=\"year.isYearDisabled\"\n          (click)=\"yearClick(year)\"\n          *ngFor=\"let year of years\">\n          <span>{{ year.value }}</span>\n        </div>\n      </div>\n    </div>\n    <!-- End: year view mode -->\n\n    <!-- Start: month view mode -->\n    <div\n      *ngIf=\"viewModes[currentViewMode] === 'month'\"\n      class=\"months-container\">\n      <div\n        class=\"content-container\">\n        <div\n          class=\"month-col three-col-per-row dp-btn\"\n          [class.today]=\"month.isMonthOfTodayDate\"\n          [class.selected]=\"month.isMonthOfSelectedDate\"\n          [class.disabled]=\"month.isMonthDisabled\"\n          (click)=\"monthClick(month)\"\n          *ngFor=\"let month of months\">\n          <span>{{ month.indexValue | monthText }}</span>\n        </div>\n      </div>\n    </div>\n    <!-- End: month view mode -->\n\n    <!-- Start: day view mode -->\n    <div\n      *ngIf=\"viewModes[currentViewMode] === 'day'\"\n      class=\"days-container\">\n      <div\n        class=\"content-container week-days\">\n        <div\n          class=\"day-col\"\n          *ngFor=\"let weekDay of weekDays\">\n          <span>{{ weekDay }}</span>\n        </div>\n      </div>\n      <div\n        class=\"content-container month-days\">\n        <ng-container\n          *ngFor=\"let row of days\">\n          <div\n            class=\"day-col dp-btn\"\n            [class.other-month]=\"!day.isDayInCurrentMonth\"\n            [class.today]=\"day.isDayOfTodayDate\"\n            [class.selected]=\"day.isDayOfSelectedDate\"\n            [class.disabled]=\"day.isDayDisabled\"\n            (click)=\"dayClick(day)\"\n            *ngFor=\"let day of row\">\n            <span>{{ day.value }}</span>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n    <!-- End: day view mode -->\n\n    <!-- Start: time picker -->\n    <div\n      *ngIf=\"_timeEnable\"\n      class=\"content-container time-container\"\n      [class.include-second]=\"timeShowSecond\"\n      [class.include-12-hour]=\"_timeMeridian\">\n      <div\n        class=\"time-col hour-col the-divider\">\n        <div\n          (click)=\"increaseHour()\"\n          (mousedown)=\"setIncreaseHourInterval()\"\n          (mouseup)=\"clearIncreaseHourInterval()\"\n          (touchstart)=\"setIncreaseHourInterval()\"\n          (touchend)=\"clearIncreaseHourInterval()\"\n          (touchcancel)=\"clearIncreaseHourInterval()\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 255 255\"\n            xml:space=\"preserve\">\n            <polygon\n              points=\"0,191.25 127.5,63.75 255,191.25\"></polygon>\n          </svg>\n        </div>\n        <div>\n          <span>{{ hourText }}</span>\n        </div>\n        <div\n          (click)=\"decreaseHour()\"\n          (mousedown)=\"setDecreaseHourInterval()\"\n          (mouseup)=\"clearDecreaseHourInterval()\"\n          (touchstart)=\"setDecreaseHourInterval()\"\n          (touchend)=\"clearDecreaseHourInterval()\"\n          (touchcancel)=\"clearDecreaseHourInterval()\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 255 255\"\n            xml:space=\"preserve\">\n            <polygon\n              points=\"0,63.75 127.5,191.25 255,63.75\"></polygon>\n          </svg>\n        </div>\n      </div>\n      <div\n        class=\"time-col minute-col\"\n        [class.the-divider]=\"timeShowSecond\">\n        <div\n          (click)=\"increaseMinute()\"\n          (mousedown)=\"setIncreaseMinuteInterval()\"\n          (mouseup)=\"clearIncreaseMinuteInterval()\"\n          (touchstart)=\"setIncreaseMinuteInterval()\"\n          (touchend)=\"clearIncreaseMinuteInterval()\"\n          (touchcancel)=\"clearIncreaseMinuteInterval()\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 255 255\"\n            xml:space=\"preserve\">\n            <polygon\n              points=\"0,191.25 127.5,63.75 255,191.25\"></polygon>\n          </svg>\n        </div>\n        <div>\n          <span>{{ minuteText }}</span>\n        </div>\n        <div\n          (click)=\"decreaseMinute()\"\n          (mousedown)=\"setDecreaseMinuteInterval()\"\n          (mouseup)=\"clearDecreaseMinuteInterval()\"\n          (touchstart)=\"setDecreaseMinuteInterval()\"\n          (touchend)=\"clearDecreaseMinuteInterval()\"\n          (touchcancel)=\"clearDecreaseMinuteInterval()\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 255 255\"\n            xml:space=\"preserve\">\n            <polygon\n              points=\"0,63.75 127.5,191.25 255,63.75\"></polygon>\n          </svg>\n        </div>\n      </div>\n      <div\n        *ngIf=\"timeShowSecond\"\n        class=\"time-col second-col\">\n        <div\n          (click)=\"increaseSecond()\"\n          (mousedown)=\"setIncreaseSecondInterval()\"\n          (mouseup)=\"clearIncreaseSecondInterval()\"\n          (touchstart)=\"setIncreaseSecondInterval()\"\n          (touchend)=\"clearIncreaseSecondInterval()\"\n          (touchcancel)=\"clearIncreaseSecondInterval()\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 255 255\"\n            xml:space=\"preserve\">\n            <polygon\n              points=\"0,191.25 127.5,63.75 255,191.25\"></polygon>\n          </svg>\n        </div>\n        <div>\n          <span>{{ secondText }}</span>\n        </div>\n        <div\n          (click)=\"decreaseSecond()\"\n          (mousedown)=\"setDecreaseSecondInterval()\"\n          (mouseup)=\"clearDecreaseSecondInterval()\"\n          (touchstart)=\"setDecreaseSecondInterval()\"\n          (touchend)=\"clearDecreaseSecondInterval()\"\n          (touchcancel)=\"clearDecreaseSecondInterval()\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 255 255\"\n            xml:space=\"preserve\">\n            <polygon\n              points=\"0,63.75 127.5,191.25 255,63.75\"></polygon>\n          </svg>\n        </div>\n      </div>\n      <div\n        *ngIf=\"_timeMeridian\"\n        class=\"time-col time-in-12-hour-format-col\">\n        <div\n          (click)=\"toggleAmPm()\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 255 255\"\n            xml:space=\"preserve\">\n            <polygon\n              points=\"0,191.25 127.5,63.75 255,191.25\"></polygon>\n          </svg>\n        </div>\n        <div>\n          <span>{{ amPmText }}</span>\n        </div>\n        <div\n          (click)=\"toggleAmPm()\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 255 255\"\n            xml:space=\"preserve\">\n            <polygon\n              points=\"0,63.75 127.5,191.25 255,63.75\"></polygon>\n          </svg>\n        </div>\n      </div>\n    </div>\n    <!-- End: time picker -->\n\n    <!-- Start: toolbox -->\n    <div\n      class=\"the-toolbox\">\n      <div\n        class=\"the-item dp-btn\"\n        (click)=\"selectToday()\">\n        <span>\u0627\u0645\u0631\u0648\u0632</span>\n      </div>\n    </div>\n    <!-- End: toolbox -->\n\n  </div>\n</div>\n",
                styles: [".datepicker-outer-container.theme-default{background:#fff;border:1px solid #ccc;box-shadow:0 5px 10px rgba(0,0,0,.2);color:#333}.datepicker-outer-container.theme-default .datepicker-inner-container .navigation-container .go-back svg path,.datepicker-outer-container.theme-default .datepicker-inner-container .navigation-container .go-forward svg path{fill:#333}.datepicker-outer-container.theme-default .datepicker-inner-container .dp-btn:hover{background:#007be6!important;color:#fff!important}.datepicker-outer-container.theme-default .datepicker-inner-container .dp-btn:hover svg path{fill:#fff!important}.datepicker-outer-container.theme-default .datepicker-inner-container .dp-btn.today{background:#333;color:#fff}.datepicker-outer-container.theme-default .datepicker-inner-container .dp-btn.selected{background:#005299;color:#fff}.datepicker-outer-container.theme-default .datepicker-inner-container .dp-btn.disabled{background:#f1f1f1!important;color:#ccc!important;cursor:not-allowed!important}.datepicker-outer-container.theme-default .datepicker-inner-container .dp-btn.other-month{color:#ccc}.datepicker-outer-container.theme-default .datepicker-inner-container .time-container{background:#f9f9f9;border-top-color:#f1f1f1}.datepicker-outer-container.theme-default .datepicker-inner-container .time-container .time-col div svg polygon{fill:#ccc}.datepicker-outer-container.theme-default .datepicker-inner-container .time-container .time-col div:hover svg polygon{fill:#807f7f}.datepicker-outer-container.theme-blue{background:#1a3347;box-shadow:0 5px 10px rgba(0,0,0,.2);color:#fff}.datepicker-outer-container.theme-blue .datepicker-inner-container .navigation-container .go-back svg path,.datepicker-outer-container.theme-blue .datepicker-inner-container .navigation-container .go-forward svg path{fill:#fff}.datepicker-outer-container.theme-blue .datepicker-inner-container .dp-btn:hover{background:#0095c6!important;color:#fff!important}.datepicker-outer-container.theme-blue .datepicker-inner-container .dp-btn:hover svg path{fill:#fff!important}.datepicker-outer-container.theme-blue .datepicker-inner-container .dp-btn.today{background:#fff;color:#1a3347}.datepicker-outer-container.theme-blue .datepicker-inner-container .dp-btn.selected{background:#0085b2;color:#fff}.datepicker-outer-container.theme-blue .datepicker-inner-container .dp-btn.disabled{background:#204b6e!important;color:#00aae2!important;cursor:not-allowed!important}.datepicker-outer-container.theme-blue .datepicker-inner-container .dp-btn.other-month{color:#00aae2}.datepicker-outer-container.theme-blue .datepicker-inner-container .time-container{background:#204b6e;border-top-color:#204b6e}.datepicker-outer-container.theme-blue .datepicker-inner-container .time-container .time-col div svg polygon{fill:#ccc}.datepicker-outer-container.theme-blue .datepicker-inner-container .time-container .time-col div:hover svg polygon{fill:#807f7f}.datepicker-outer-container.theme-gray{background:#556270;box-shadow:0 5px 10px rgba(0,0,0,.2);color:#fff}.datepicker-outer-container.theme-gray .datepicker-inner-container .navigation-container .go-back svg path,.datepicker-outer-container.theme-gray .datepicker-inner-container .navigation-container .go-forward svg path{fill:#fff}.datepicker-outer-container.theme-gray .datepicker-inner-container .dp-btn:hover{background:#393939!important;color:#fff!important}.datepicker-outer-container.theme-gray .datepicker-inner-container .dp-btn:hover svg path{fill:#fff!important}.datepicker-outer-container.theme-gray .datepicker-inner-container .dp-btn.today{background:#fff;color:#556270}.datepicker-outer-container.theme-gray .datepicker-inner-container .dp-btn.selected{background:#c44d58;color:#fff}.datepicker-outer-container.theme-gray .datepicker-inner-container .dp-btn.disabled{background:#393939!important;color:#ccc!important;cursor:not-allowed!important}.datepicker-outer-container.theme-gray .datepicker-inner-container .dp-btn.other-month{color:#ccc}.datepicker-outer-container.theme-gray .datepicker-inner-container .time-container{background:#444;border-top-color:#393939}.datepicker-outer-container.theme-gray .datepicker-inner-container .time-container .time-col div svg polygon{fill:#ccc}.datepicker-outer-container.theme-gray .datepicker-inner-container .time-container .time-col div:hover svg polygon{fill:#807f7f}.datepicker-outer-container.theme-dark{background:#2d2d30;box-shadow:0 5px 10px rgba(0,0,0,.2);color:#fff}.datepicker-outer-container.theme-dark .datepicker-inner-container .navigation-container .go-back svg path,.datepicker-outer-container.theme-dark .datepicker-inner-container .navigation-container .go-forward svg path{fill:#fff}.datepicker-outer-container.theme-dark .datepicker-inner-container .dp-btn:hover{background:#393939!important;color:#fff!important}.datepicker-outer-container.theme-dark .datepicker-inner-container .dp-btn:hover svg path{fill:#fff!important}.datepicker-outer-container.theme-dark .datepicker-inner-container .dp-btn.today{background:#fff;color:#2d2d2d}.datepicker-outer-container.theme-dark .datepicker-inner-container .dp-btn.selected{background:#d68e3a;color:#fff}.datepicker-outer-container.theme-dark .datepicker-inner-container .dp-btn.disabled{background:#393939!important;color:#ccc!important;cursor:not-allowed!important}.datepicker-outer-container.theme-dark .datepicker-inner-container .dp-btn.other-month{color:#ccc}.datepicker-outer-container.theme-dark .datepicker-inner-container .time-container{background:#393939;border-top-color:#393939}.datepicker-outer-container.theme-dark .datepicker-inner-container .time-container .time-col div svg polygon{fill:#ccc}.datepicker-outer-container.theme-dark .datepicker-inner-container .time-container .time-col div:hover svg polygon{fill:#807f7f}.datepicker-outer-container.theme-black{background:#222;box-shadow:0 5px 10px rgba(0,0,0,.2);color:#fff}.datepicker-outer-container.theme-black .datepicker-inner-container .navigation-container .go-back svg path,.datepicker-outer-container.theme-black .datepicker-inner-container .navigation-container .go-forward svg path{fill:#fff}.datepicker-outer-container.theme-black .datepicker-inner-container .dp-btn:hover{background:#393939!important;color:#fff!important}.datepicker-outer-container.theme-black .datepicker-inner-container .dp-btn:hover svg path{fill:#fff!important}.datepicker-outer-container.theme-black .datepicker-inner-container .dp-btn.today{background:#fff;color:#222}.datepicker-outer-container.theme-black .datepicker-inner-container .dp-btn.selected{background:#f26161;color:#fff}.datepicker-outer-container.theme-black .datepicker-inner-container .dp-btn.disabled{background:#393939!important;color:#ccc!important;cursor:not-allowed!important}.datepicker-outer-container.theme-black .datepicker-inner-container .dp-btn.other-month{color:#ccc}.datepicker-outer-container.theme-black .datepicker-inner-container .time-container{background:#444;border-top-color:#393939}.datepicker-outer-container.theme-black .datepicker-inner-container .time-container .time-col div svg polygon{fill:#ccc}.datepicker-outer-container.theme-black .datepicker-inner-container .time-container .time-col div:hover svg polygon{fill:#807f7f}.datepicker-outer-container{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;direction:rtl;display:inline-block;font-size:12px;min-width:200px;padding:8px 3px;text-align:center;user-select:none;vertical-align:top}.datepicker-outer-container.hide{display:none}.datepicker-outer-container.manual-position{width:100%}.datepicker-outer-container .datepicker-inner-container .content-container{margin-bottom:8px}.datepicker-outer-container .datepicker-inner-container .navigation-container .go-back,.datepicker-outer-container .datepicker-inner-container .navigation-container .go-forward,.datepicker-outer-container .datepicker-inner-container .navigation-container .switch-view{cursor:pointer;display:inline-block;height:24px;vertical-align:top}.datepicker-outer-container .datepicker-inner-container .navigation-container .go-back,.datepicker-outer-container .datepicker-inner-container .navigation-container .go-forward{position:relative;width:15%}.datepicker-outer-container .datepicker-inner-container .navigation-container .go-back svg,.datepicker-outer-container .datepicker-inner-container .navigation-container .go-forward svg{height:12px;position:absolute;right:calc(50% - 6px);top:calc(50% - 6px);width:12px}.datepicker-outer-container .datepicker-inner-container .navigation-container .switch-view{font-weight:700;margin:0 2%;width:66%}.datepicker-outer-container .datepicker-inner-container .navigation-container .switch-view span{vertical-align:sub}.datepicker-outer-container .datepicker-inner-container .days-container .day-col{display:inline-block;padding:3px 0;vertical-align:top;width:14.2857142857%}.datepicker-outer-container .datepicker-inner-container .days-container .week-days .day-col{font-weight:700}.datepicker-outer-container .datepicker-inner-container .days-container .month-days .day-col{cursor:pointer}.datepicker-outer-container .datepicker-inner-container .three-col-per-row{cursor:pointer;display:inline-block;margin:1px 0;padding:9px 0;vertical-align:top;width:33.3333333333%}.datepicker-outer-container .datepicker-inner-container .time-container{border-top-style:solid;border-top-width:1px;direction:ltr;padding:5px}.datepicker-outer-container .datepicker-inner-container .time-container .time-col{cursor:pointer;display:inline-block;position:relative;vertical-align:top;width:50%}.datepicker-outer-container .datepicker-inner-container .time-container .time-col div{transition:all .1s ease}.datepicker-outer-container .datepicker-inner-container .time-container .time-col div svg{height:12px;width:12px}.datepicker-outer-container .datepicker-inner-container .time-container .time-col.the-divider:after{content:\":\";position:absolute;right:0;top:33%}.datepicker-outer-container .datepicker-inner-container .time-container.include-second .time-col{width:33.3333333333%}.datepicker-outer-container .datepicker-inner-container .time-container.include-second.include-12-hour .time-col{width:25%}.datepicker-outer-container .datepicker-inner-container .time-container.include-12-hour .time-col{width:33.3333333333%}.datepicker-outer-container .datepicker-inner-container .the-toolbox{text-align:right}.datepicker-outer-container .datepicker-inner-container .the-toolbox .the-item{cursor:pointer;display:inline-block;font-weight:700;margin-left:5px;min-width:50px;padding:3px 5px;text-align:center;vertical-align:top}.datepicker-outer-container .datepicker-inner-container .the-toolbox .the-item:last-child{margin-left:0}"]
            }] }
];
/** @nocollapse */
NgPersianDatepickerComponent.ctorParameters = () => [];
NgPersianDatepickerComponent.propDecorators = {
    input: [{ type: Input }],
    dateValue: [{ type: Input }],
    dateInitValue: [{ type: Input }],
    dateIsGregorian: [{ type: Input }],
    dateFormat: [{ type: Input }],
    dateGregorianFormat: [{ type: Input }],
    dateMin: [{ type: Input }],
    dateMax: [{ type: Input }],
    dateOnInit: [{ type: Input }],
    dateOnSelect: [{ type: Input }],
    timeEnable: [{ type: Input }],
    timeShowSecond: [{ type: Input }],
    timeMeridian: [{ type: Input }],
    uiTheme: [{ type: Input }],
    uiIsVisible: [{ type: Input }],
    uiHideOnOutsideClick: [{ type: Input }],
    uiHideAfterSelectDate: [{ type: Input }],
    uiAutoPosition: [{ type: Input }],
    uiPositionOffset: [{ type: Input }],
    uiContainerWidth: [{ type: Input }],
    uiYearView: [{ type: Input }],
    uiMonthView: [{ type: Input }],
    calcInputPositionAndSize: [{ type: HostListener, args: ['window:resize',] }],
    onInsideClick: [{ type: HostListener, args: ['click',] }],
    onOutsideClick: [{ type: HostListener, args: ['document:click', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.id;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.containerInlineStyle;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.weekDays;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.preventClose;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.uiYearViewModel;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.uiMonthViewModel;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.viewDateTitle;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.viewModes;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.currentViewMode;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.today;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.selectedDate;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.viewDate;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.years;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.months;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.days;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.hour;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.minute;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.second;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.hourText;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.minuteText;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.secondText;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.amPmText;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.fastTimeChangeTimeOut;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.fastTimeChangeInterval;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.increaseHourTimeout;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.increaseHourInterval;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.decreaseHourTimeout;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.decreaseHourInterval;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.increaseMinuteTimeout;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.increaseMinuteInterval;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.decreaseMinuteTimeout;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.decreaseMinuteInterval;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.increaseSecondTimeout;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.increaseSecondInterval;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.decreaseSecondTimeout;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.decreaseSecondInterval;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.wasInsideClick;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.inputEventFocusListener;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.inputEventInputListener;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.inputPosition;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype.inputSize;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.input;
    /**
     * @type {?}
     * @private
     */
    NgPersianDatepickerComponent.prototype._dateValue;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.dateValue;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.dateInitValue;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.dateIsGregorian;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.dateFormat;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.dateGregorianFormat;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.dateMin;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.dateMax;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.dateOnInit;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.dateOnSelect;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype._timeEnable;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.timeShowSecond;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype._timeMeridian;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.uiTheme;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.uiIsVisible;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.uiHideOnOutsideClick;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.uiHideAfterSelectDate;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.uiAutoPosition;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.uiPositionOffset;
    /** @type {?} */
    NgPersianDatepickerComponent.prototype.uiContainerWidth;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/month-text.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MonthTextPipe {
    constructor() {
        this.months = [
            'فروردین',
            'اردیبهشت',
            'خرداد',
            'تیر',
            'مرداد',
            'شهریور',
            'مهر',
            'آبان',
            'آذر',
            'دی',
            'بهمن',
            'اسفند',
        ];
    }
    /**
     * @param {?} index
     * @return {?}
     */
    transform(index) {
        return this.months[index];
    }
}
MonthTextPipe.decorators = [
    { type: Pipe, args: [{
                name: 'monthText'
            },] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    MonthTextPipe.prototype.months;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-persian-datepicker.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgPersianDatepickerModule {
}
NgPersianDatepickerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    NgPersianDatepickerComponent,
                    MonthTextPipe
                ],
                imports: [
                    CommonModule
                ],
                exports: [
                    NgPersianDatepickerComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ng-persian-datepicker.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgPersianDatepickerComponent, NgPersianDatepickerModule, NgPersianDatepickerService, MonthTextPipe as ɵa };
//# sourceMappingURL=ng-persian-datepicker.js.map
