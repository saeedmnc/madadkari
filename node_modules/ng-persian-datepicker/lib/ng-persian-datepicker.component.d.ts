import moment from 'moment-jalaali';
import { YearModel } from './model/year.model';
import { MonthModel } from './model/month.model';
import { DayModel } from './model/day.model';
import { OnDestroy, OnInit } from '@angular/core';
export declare class NgPersianDatepickerComponent implements OnInit, OnDestroy {
    constructor();
    id: string;
    containerInlineStyle: object;
    weekDays: Array<string>;
    private preventClose;
    private uiYearViewModel;
    private uiMonthViewModel;
    viewDateTitle: string;
    viewModes: Array<string>;
    currentViewMode: number;
    private today;
    private selectedDate;
    private viewDate;
    years: YearModel[];
    months: MonthModel[];
    days: Array<DayModel[]>;
    private hour;
    private minute;
    private second;
    hourText: string;
    minuteText: string;
    secondText: string;
    amPmText: string;
    private fastTimeChangeTimeOut;
    private fastTimeChangeInterval;
    private increaseHourTimeout;
    private increaseHourInterval;
    private decreaseHourTimeout;
    private decreaseHourInterval;
    private increaseMinuteTimeout;
    private increaseMinuteInterval;
    private decreaseMinuteTimeout;
    private decreaseMinuteInterval;
    private increaseSecondTimeout;
    private increaseSecondInterval;
    private decreaseSecondTimeout;
    private decreaseSecondInterval;
    private wasInsideClick;
    private inputEventFocusListener;
    private inputEventInputListener;
    private inputPosition;
    private inputSize;
    input: HTMLInputElement;
    private _dateValue;
    dateValue: string | number;
    dateInitValue: boolean;
    dateIsGregorian: boolean;
    dateFormat: string;
    dateGregorianFormat: string;
    dateMin: number;
    dateMax: number;
    dateOnInit: (shamsiDate: string, gregorianDate: string, timestamp: number) => void;
    dateOnSelect: (shamsiDate: string, gregorianDate: string, timestamp: number) => void;
    _timeEnable: boolean;
    set timeEnable(value: boolean);
    timeShowSecond: boolean;
    _timeMeridian: boolean;
    set timeMeridian(value: boolean);
    uiTheme: string;
    uiIsVisible: boolean;
    uiHideOnOutsideClick: boolean;
    uiHideAfterSelectDate: boolean;
    uiAutoPosition: boolean;
    uiPositionOffset: Array<number>;
    uiContainerWidth: string;
    set uiYearView(value: boolean);
    get uiYearView(): boolean;
    set uiMonthView(value: boolean);
    get uiMonthView(): boolean;
    ngOnInit(): void;
    ngOnDestroy(): void;
    setId(): void;
    setWeekDays(): void;
    setViewModes(): void;
    checkViewModes(): void;
    setToday(): void;
    setDateInitValue(): void;
    setSelectedDate(): void;
    setViewDate(): void;
    onChangeViewDate(): void;
    setYears(): void;
    setMonths(): void;
    setDays(): void;
    setViewDateTitle(): void;
    setTime(): void;
    seTimeText(): void;
    setHourText(): void;
    setMinuteText(): void;
    setSecondText(): void;
    setAmPmText(): void;
    setInputValue(dispatchEvent?: boolean): void;
    lockInputValue(): void;
    setShowOnInputFocus(): void;
    skipViewDate(skip: number, type: number): void;
    navigate(forward?: boolean): void;
    nextViewMode(): void;
    selectToday(): void;
    yearClick(year: YearModel): void;
    monthClick(month: MonthModel): void;
    dayClick(day: DayModel): void;
    isYearOfTodayDate(year: Array<number>): boolean;
    isYearOfSelectedDate(year: Array<number>): boolean;
    isYearDisabled(month: Array<number>): boolean;
    isMonthOfToday(month: Array<number>): boolean;
    isMonthOfSelectedDate(month: Array<number>): boolean;
    isMonthDisabled(month: Array<number>): boolean;
    isDayInCurrentMonth(day: Array<number>): boolean;
    isDayOfTodayDate(day: Array<number>): boolean;
    isDayOfSelectedDate(day: Array<number>): boolean;
    isDayDisabled(day: Array<number>): boolean;
    isDateInRange(date: number, isYear: boolean, isMonth: boolean): boolean;
    changeSelectedDate(date: moment.Moment): void;
    onChangeSelectedDate(): void;
    increaseHour(): void;
    decreaseHour(): void;
    increaseMinute(): void;
    decreaseMinute(): void;
    increaseSecond(): void;
    decreaseSecond(): void;
    toggleAmPm(): void;
    onTimeChange(): void;
    setIncreaseHourInterval(): void;
    clearIncreaseHourInterval(): void;
    setDecreaseHourInterval(): void;
    clearDecreaseHourInterval(): void;
    setIncreaseMinuteInterval(): void;
    clearIncreaseMinuteInterval(): void;
    setDecreaseMinuteInterval(): void;
    clearDecreaseMinuteInterval(): void;
    setIncreaseSecondInterval(): void;
    clearIncreaseSecondInterval(): void;
    setDecreaseSecondInterval(): void;
    clearDecreaseSecondInterval(): void;
    setContainerInlineStyle(): void;
    calcInputPositionAndSize(): void;
    onInsideClick(): void;
    onOutsideClick(event: any): void;
}
