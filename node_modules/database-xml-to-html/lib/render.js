var Resource = require('./resource')

exports.toHtml = function (root) {

	var database = root.children[0].children[0]
	var subsystem = database.children[0]
	var modules = subsystem.children

	var title = database.attrs.id + '-' +database.attrs.name + ' - ' + subsystem.attrs.id

	return toHTML(
	title,
	'<div class="toc">' +
		modules.map(renderModuleTOC).join('') +
	'</div>',
	'<div class="database-subsystem">' +
		'<div class="title">' +
			title +
		'</div>' +
		'<div class="body">' +
			modules.map(renderModule).join('') +
		'</div>' +
	'</div>'
	)
}

function toHTML(title, toc, body) {
	return (
	'<!doctype html>' +
		'<html>' +
		'<head>' +
			'<meta charset="UTF-8">' +
			'<title>' + title + '</title>' +
			'<style>' + Resource.css + '</style>' +
		'</head>' +
		'<body>' +
			toc +
			body +
			'<script>' + Resource.js + '</script>' +
		'</body>' +
	'</html>'
	)
}

function renderModule(module) {
	var id = module.attrs.id || module.children[0].attrs.id
	return (
	'<div id="module-' + id + '" class="module" data-id="' + id + '">' +
		'<div class="title">' +
			id + (module.children.length > 1 ? ' - more than one submodules!' : '') +
			'<a class="anchor" href="#module-' + id + '"></a>' +
		'</div>' +
		'<div class="body">' +
			module.children[0].children.map(renderTable).join('') +
		'</div>' +
	'</div>'
	)
}

function renderModuleTOC(module) {
	var id = module.attrs.id || module.children[0].attrs.id
	return (
	'<div class="module">' +
		'<a href="#module-' + id + '">' + id + '</a>' +
		'<ul class="tables">' +
			module.children[0].children.map(renderTableTOC).join('') +
		'</ul>' +
	'</div>'
	)
}

function renderTable(table) {
	var attrs = table.attrs
	var id = attrs.id
	var name = attrs.name
	return (
	'<div id="table-' + id + '" class="table" data-id="' + id + '" data-name="' + name + '">' +
		'<div class="title">' +
			id + ' - ' + name + '<a class="anchor" href="#table-' + id + '"></a>' +
			'<br>' +
			'<code>' + attrs.pkg + '</code> <code>' + attrs.jspPath + '</code>' +
		'</div>' +
		'<div class="body">' +
			table.children.map(renderTableRemOrColumn).join('') +
		'</div>' +
	'</div>'
	)
}

function renderTableTOC(table) {
	var id = table.attrs.id
	var name = table.attrs.name
	return (
	'<li><a href="#table-' + id + '">' + id + ' - ' + name + '</a></li>'
	)
}

function renderTableRemOrColumn(data) {
	switch (data.name) {
		case 'rem': return renderRem(data)
		case 'column': return renderColumn(data)
		case 'foreign-key': return renderForeignKey(data)
		default: console.log('UNKOWN table child: ' + JSON.stringify(data))
	}
}

function renderRem(data) {
	return (
	data.children.length > 0 ?
	'<div class="rem">' + data.children[0].text + '</div>' : ''
	)
}

function renderColumn(data) {
	var attrs = data.attrs
	return (
	'<div class="column' + (attrs.primaryKey === 'true' ? ' primary' : '') + (attrs.required === 'true' ? ' required' : '') + '">' +
		'<span class="id">' + attrs.id + '</span>' +
		'<span class="name">' + attrs.name + '</span>' +
		'<span class="type">' + attrs.type + '</span>' +
		'<span class="size">' + (attrs.size || '') + '</span>' +
		'<span class="note">' + (attrs.enumValue || attrs.note || '') + '</span>' +
	'</div>'
	)
}

function renderForeignKey(data) {
	var referenceAttrs = data.children[0].attrs
	var foreignTableId = data.attrs.foreignTable
	return (
	'<div class="foreign-key">' +
		'<span class="local">' + referenceAttrs.local + '</span>' +
		' &lt;==&gt; ' +
		'<span class="foreign">' +
		'<a href="#table-' + foreignTableId + '">' + foreignTableId + '</a>.' + referenceAttrs.foreign +
		'</span>' +
	'</div>'
	)
}